snippet args "argparse snippet string and boolean with defaults"
	parser = argparse.ArgumentParser(description='$1')
	parser.add_argument('--string', metavar='s', type=str, help='')
	parser.add_argument('--dryrun', action='store_true',  help='skip commiting the new tag', default=False)
	args = parser.parse_args()
	
snippet arg_string "argparse string"
	parser.add_argument('--$1', metavar='$2', type=str, help='$3')

snippet arg_bool "argparse boolean"
	parser.add_argument('--$1', metavar='$2', action='store_true',  help='$3')

snippet logging "Simple logging setup to stdout"
	import logging

	parser.add_argument("--debug", dest="debug", action="store_true", default=False, help="Debug log output")
	log = logging.getLogger(__name__)
	logging.basicConfig(format='%(levelname)s %(message)s', stream=sys.stdout, encoding="utf=8", level=logging.INFO)
	if args.debug:
			log.setLevel(logging.DEBUG)

snippet colors "python colors for printing"
	PURPLE = "\033[95m"
	BLUE = "\033[94m"
	CYAN = "\033[96m"
	GREEN = "\033[92m"
	GRAY = "\033[90m"
	YELLOW = "\033[93m"
	RED = "\033[91m"
	RESET = "\033[0m"
	BOLD = "\033[1m"
	UNDERLINE = "\033[4m"
	ITALICS = "\033[3m"

snippet args_typed "argparse with Typed args"
	from dataclasses import dataclass

	@dataclass
	class ProgramArgs:
			"""Typed program arguments."""
			loglevel: int
			dryrun: bool


	def set_logging(log_level):
			logging.basicConfig(level=log_level)

	def parse_args():
			parser = argparse.ArgumentParser(description="")
			parser.add_argument(
					"--dryrun",
					action="store_true",
					help="skip creating tickets and just display what I would create",
					default=False,
			)
			parser.add_argument(
					"--debug",
					dest="loglevel",
					action="store_const",
					const=logging.DEBUG,
					default=logging.WARNING,
			)

			parser.add_argument("--verbose", dest="loglevel", action="store_const", const=logging.INFO)
			return parser.parse_args(namespace=ProgramArgs)

snippet main "Main function with if statement"
	def main(): ...

	if __name__ == "__main__":
			main()

snippet python_script_starter "Starting point for python script"
	#!/usr/bin/env python3
	"""Python script."""

	import argparse
	import logging
	from dataclasses import dataclass

	log: logging.Logger = logging.getLogger()


	@dataclass
	class ProgramArgs:
		"""Typed program arguments."""

		loglevel: int
		dryrun: bool


	def set_logging(log_level) -> None:
		"""Set logging level from args."""
		logging.basicConfig(level=log_level)


	def parse_args() -> type[ProgramArgs]:
		"""Get arguments."""
		parser = argparse.ArgumentParser(description="")
		parser.add_argument(
			"--dryrun",
			action="store_true",
			help="Preform a dryrun action",
			default=False,
		)
		parser.add_argument(
			"--debug",
			dest="loglevel",
			action="store_const",
			const=logging.DEBUG,
			default=logging.INFO,
		)
		return parser.parse_args(namespace=ProgramArgs)


	def main() -> None:
		"""Main fuction."""
		args: type[ProgramArgs] = parse_args()
		set_logging(args.loglevel)


	if __name__ == "__main__":
		main()

snippet parser_add_arg_str "Argparse add string argument"
	parser.add_argument( "--$1", dest="$1", help="", default="")
